$HELP_MSG = "\e[1m\e[4mUsage: aoc <COMMAND> [ARGS]\e[0m:
\e[1m\e[4mCommon Commands\e[0m:
  \e[1m\e[4mr\e[0m\e[1mun\e[0m       [year] [day] [part]   Run your solution on the input.
  \e[1m\e[4mc\e[0m\e[1mreate\e[0m    [year] [day] [lang]   Download a puzzle and set up the workspace.
  \e[1m\e[4ms\e[0m\e[1mubmit\e[0m    [year] [day] [ans]    Submit a solution to a puzzle.
  \e[1m\e[4mt\e[0m\e[1mest\e[0m      [year] [day] [part]   Run your solution on test cases.

\e[1m\e[4mSetup Commands\e[0m:
  \e[1minit-year\e[0m    <year> <dir_name>  Creates a year directory.
  \e[1minit-master\e[0m                     Initializes the master directory.
  \e[1minfo-dump\e[0m                       Prints a bunch of trouble-shooting info.
  \e[1mconfig-gen\e[0m                      Print an example config file.

Commands are smart. Some arguments and argument order are optional.
Commands will do the most obvious(TM) thing given ambigious arguments."

$TAMPER_WARNING = '# THIS FILE WAS AUTO-GENERATED BY GARNET-AOC. DO NOT MANUALLY MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING!'

require_relative 'language'

Language.add(
  etc        = 'C',
  extension   = 'c',
  compile_cmd = 'gcc -o %%BIN_DIR%%/a.out %%SRC_FILE%% %%LIB_FILES%%',
  run_cmd = '%%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'C++',
  extension   = 'cpp',
  compile_cmd = 'g++ -o %%BIN_DIR%%/a.out %%SRC_FILE%% %%LIB_FILES%%',
  run_cmd = '%%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'rust',
  extension   = 'rs',
  compile_cmd = 'rustc -o %%BIN_DIR%%/a.out %%SRC_FILE%% %%LIB_FILES%%',
  run_cmd = '%%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'haskell',
  extension   = 'hs',
  compile_cmd = 'ghc-9.4 -o %%BIN_DIR%%/a.out %%SRC_FILE%% %%LIB_FILES%%',
  run_cmd = '%%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'java',
  extension   = 'java',
  compile_cmd = 'javac -d %%BIN_DIR%%/ %%SRC_FILE%%', # TODO: figure out lib files with java
  run_cmd = 'java -cp %%BIN_DIR%% %%RUN_FILE_BASE%%'
)
Language.add(
  etc        = 'python',
  extension   = 'py',
  compile_cmd = nil,
  run_cmd = 'python %%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'ruby',
  extension   = 'rb',
  compile_cmd = nil,
  run_cmd = 'ruby %%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'javascript',
  extension   = 'js',
  compile_cmd = nil,
  run_cmd = 'node %%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'typescript',
  extension   = 'ts',
  compile_cmd = nil,
  run_cmd = 'deno %%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'perl',
  extension   = 'pl',
  compile_cmd = nil,
  run_cmd = 'perl %%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'go',
  extension   = 'go',
  compile_cmd = nil,
  run_cmd = 'go run %%RUN_FILE_PATH%%'
)
Language.add(
  etc        = 'elixirscript',
  extension   = 'exs',
  compile_cmd = nil,
  run_cmd = 'elixir %%RUN_FILE_PATH%%'
)

$INPUTS_WITH_SOLUTIONS = true
$PUZZLES_WITH_SOLUTIONS = false

$SOLUTIONS_DIR_NAME = 'solutions'
$INPUTS_DIR_NAME = 'inputs'
$PUZZLES_DIR_NAME = 'puzzles'

$DAY_DIRECTORY_NAME = '%%DAY%%'
$SOLUTION_FILE_NAME = 'p%%PART%%'
$INPUT_FILE_NAME = 'input.txt'
$PUZZLE_FILE_NAME = 'puzzle%%DAY%%.md'

$SESSION = ''
$MASTER_DIR = ''
$DEFAULT_LANG = 'python'
# $IDE = '(command -v code > /dev/null && code) || (command -v nvim > /dev/null && nvim) || (command -v vim > /dev/null && vim) || echo No IDE found'
$IDE = "nvim -c 'vsplit %%INPUT%% | split %%PUZZLE%% | resize 40 | wincmd l | split %%P1%%' %%P2%%"

$USE_ENV_INPUT = true
$USE_STDIN_INPUT = true

# TODO: add windos support :(
$CONFIG_DIR = '~/.config/aoc'
$CONFIG_DIR = File.expand_path($CONFIG_DIR)

require File.join($CONFIG_DIR, 'config.rb')

$MASTER_DIR = File.expand_path($MASTER_DIR) if $MASTER_DIR
