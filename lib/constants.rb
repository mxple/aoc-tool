$HELP_MSG = "\e[1m\e[4mUsage: aoc <COMMAND> [ARGS]\e[0m:
\e[1m\e[4mCommon Commands\e[0m:
  \e[1m\e[4mr\e[0m\e[1mun\e[0m       [year] [day] [part]   Runs the solution on an input.
  \e[1m\e[4mc\e[0m\e[1mreate\e[0m    [year] [day] [lang]   Gets the input for a problem, makes solution files, and opens a workspace.
  \e[1m\e[4ms\e[0m\e[1mubmit\e[0m    [year] [day] [ans]    Submits the specified answer, or runs the solution and submits the output.
  \e[1m\e[4mt\e[0m\e[1mest\e[0m      [year] [day] [part]   Same as `run` but uses test cases as input.

\e[1m\e[4mSetup Commands\e[0m:
  \e[1minit-year\e[0m    <year> <dir_name>  Creates a year directory.
  \e[1minit-master\e[0m                     Initializes the master directory.
  \e[1minfo-dump\e[0m                       Prints a bunch of trouble-shooting info.
  \e[1mconfig-gen\e[0m                      Print an example config file.

Commands are smart. You don't have to enter all arguments, or even in the right order.
Commands will do the most obvious(TM) thing if there are missing/weird parameters."

$TAMPER_WARNING = '# THIS FILE WAS AUTO-GENERATED BY GARNET-AOC. DO NOT MANUALLY MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING!'

require_relative 'language'

Language.add(
  name        = 'C',
  extension   = 'c',
  compile_cmd = 'gcc -o %%BIN_DIR%%/a.out %%SRC_FILE%% %%LIB_FILES%%',
  interpreter = nil
)
Language.add(
  name        = 'C++',
  extension   = 'cpp',
  compile_cmd = 'g++ -o %%BIN_DIR%%/a.out %%SRC_FILE%% %%LIB_FILES%%',
  interpreter = ''
)
Language.add(
  name        = 'rust',
  extension   = 'rs',
  compile_cmd = 'rustc -o %%BIN_DIR%%/a.out %%SRC_FILE%% %%LIB_FILES%%',
  interpreter = ''
)
Language.add(
  name        = 'java',
  extension   = 'java',
  compile_cmd = 'java -d %%BIN_DIR%%/ %%SRC_FILE%%', # TODO: figure out lib files with java
  interpreter = 'java'
)
Language.add(
  name        = 'python',
  extension   = 'py',
  compile_cmd = nil,
  interpreter = 'python'
)
Language.add(
  name        = 'ruby',
  extension   = 'rb',
  compile_cmd = nil,
  interpreter = 'ruby'
)
Language.add(
  name        = 'javascript',
  extension   = 'js',
  compile_cmd = nil,
  interpreter = 'node'
)
Language.add(
  name        = 'typescript',
  extension   = 'ts',
  compile_cmd = nil,
  interpreter = 'deno'
)
Language.add(
  name        = 'perl',
  extension   = 'pl',
  compile_cmd = nil,
  interpreter = 'perl'
)
Language.add(
  name        = 'haskell',
  extension   = 'hs',
  compile_cmd = nil,
  interpreter = 'runhaskell'
)
Language.add(
  name        = 'go',
  extension   = 'go',
  compile_cmd = nil,
  interpreter = 'go run'
)
Language.add(
  name        = 'elixirscript',
  extension   = 'exs',
  compile_cmd = nil,
  interpreter = 'elixir'
)

$INPUTS_WITH_SOLUTIONS = true

$SOLUTIONS_DIR_NAME = 'solutions'
$INPUTS_DIR_NAME = 'inputs'
$PUZZLES_DIR_NAME = 'puzzles'

$DAY_DIRECTORY_NAME = '%%DAY%%'
$SOLUTION_FILE_NAME = 'p%%PART%%'
$INPUT_FILE_NAME = 'input.txt'

$SESSION = ''
$MASTER_DIR = ''
$DEFAULT_LANG = 'python'
$IDE = '(command -v code > /dev/null && code) || (command -v nvim > /dev/null && nvim) || (command -v vim > /dev/null && vim) || echo No IDE found'

$USE_ENV_INPUT = true
$USE_STDIN_INPUT = true

# TODO: add windos support :(
$CONFIG_DIR = '~/.config/aoc'
$CONFIG_DIR = File.expand_path($CONFIG_DIR)

require File.join($CONFIG_DIR, 'config.rb')

$MASTER_DIR = File.expand_path($MASTER_DIR) if $MASTER_DIR
